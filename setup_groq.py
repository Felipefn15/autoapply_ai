#!/usr/bin/env python3
"""
Script de Configura√ß√£o do Groq AI
Ajuda a configurar a API key do Groq para o sistema cont√≠nuo
"""

import os
import sys
from pathlib import Path

def check_groq_installation():
    """Verifica se o Groq est√° instalado."""
    try:
        import groq
        print("‚úÖ Groq package instalado")
        return True
    except ImportError:
        print("‚ùå Groq package n√£o instalado")
        print("üì¶ Instalando...")
        try:
            import subprocess
            subprocess.check_call([sys.executable, "-m", "pip", "install", "groq>=0.4.0"])
            print("‚úÖ Groq package instalado com sucesso")
            return True
        except subprocess.CalledProcessError:
            print("‚ùå Erro ao instalar Groq package")
            return False

def get_groq_api_key():
    """Obt√©m a API key do Groq do usu√°rio."""
    print("\nüîë Configura√ß√£o da API Key do Groq")
    print("=" * 50)
    print("Para usar o Groq AI, voc√™ precisa de uma API key.")
    print("1. Acesse: https://console.groq.com/")
    print("2. Crie uma conta ou fa√ßa login")
    print("3. Gere uma nova API key")
    print("4. Cole a chave abaixo")
    print("=" * 50)
    
    while True:
        api_key = input("\nüîë Digite sua API key do Groq (ou 'skip' para pular): ").strip()
        
        if api_key.lower() == 'skip':
            print("‚ö†Ô∏è Groq AI ser√° desabilitado")
            return None
        
        if not api_key:
            print("‚ùå API key n√£o pode estar vazia")
            continue
        
        if not api_key.startswith('gsk_'):
            print("‚ö†Ô∏è API key do Groq geralmente come√ßa com 'gsk_'")
            confirm = input("Deseja continuar mesmo assim? (s/N): ").lower()
            if confirm not in ['s', 'sim', 'y', 'yes']:
                continue
        
        # Testar a API key
        if test_groq_api_key(api_key):
            return api_key
        else:
            print("‚ùå API key inv√°lida ou erro de conex√£o")
            retry = input("Deseja tentar novamente? (s/N): ").lower()
            if retry not in ['s', 'sim', 'y', 'yes']:
                return None

def test_groq_api_key(api_key: str) -> bool:
    """Testa se a API key do Groq funciona."""
    try:
        import groq
        
        print("üß™ Testando API key...")
        client = groq.Groq(api_key=api_key)
        
        # Fazer uma requisi√ß√£o simples
        response = client.chat.completions.create(
            messages=[{"role": "user", "content": "Hello, this is a test."}],
            model="llama3-8b-8192",
            max_tokens=10
        )
        
        if response.choices and response.choices[0].message.content:
            print("‚úÖ API key v√°lida e funcionando")
            return True
        else:
            print("‚ùå Resposta inv√°lida da API")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao testar API key: {e}")
        return False

def save_api_key_to_env(api_key: str):
    """Salva a API key no arquivo .env."""
    env_file = Path(".env")
    
    # Ler arquivo .env existente
    env_content = {}
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                if '=' in line and not line.strip().startswith('#'):
                    key, value = line.strip().split('=', 1)
                    env_content[key] = value
    
    # Adicionar/atualizar GROQ_API_KEY
    env_content['GROQ_API_KEY'] = api_key
    
    # Salvar arquivo .env
    with open(env_file, 'w') as f:
        for key, value in env_content.items():
            f.write(f"{key}={value}\n")
    
    print(f"‚úÖ API key salva em {env_file}")

def update_continuous_config(enable_groq: bool):
    """Atualiza a configura√ß√£o cont√≠nua."""
    config_file = Path("config/continuous_config.yaml")
    
    if not config_file.exists():
        print("‚ö†Ô∏è Arquivo de configura√ß√£o cont√≠nua n√£o encontrado")
        return
    
    try:
        import yaml
        
        # Ler configura√ß√£o
        with open(config_file, 'r') as f:
            config = yaml.safe_load(f)
        
        # Atualizar configura√ß√£o do Groq
        config['enable_groq_ai'] = enable_groq
        
        # Salvar configura√ß√£o
        with open(config_file, 'w') as f:
            yaml.dump(config, f, default_flow_style=False, indent=2)
        
        print(f"‚úÖ Configura√ß√£o atualizada em {config_file}")
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar configura√ß√£o: {e}")

def show_usage_instructions():
    """Mostra instru√ß√µes de uso."""
    print("\nüìñ INSTRU√á√ïES DE USO:")
    print("=" * 60)
    print("1. A API key ser√° salva no arquivo .env")
    print("2. O sistema cont√≠nuo ser√° configurado automaticamente")
    print("3. Para iniciar o sistema: python start_continuous_system.py")
    print("4. Para monitorar: python monitor_system.py")
    print("5. Para desabilitar Groq AI: edite config/continuous_config.yaml")
    print("=" * 60)

def main():
    """Fun√ß√£o principal."""
    print("ü§ñ CONFIGURA√á√ÉO DO GROQ AI")
    print("=" * 60)
    print("Este script ajuda a configurar o Groq AI para o sistema cont√≠nuo")
    print("=" * 60)
    
    # Verificar instala√ß√£o do Groq
    if not check_groq_installation():
        print("‚ùå N√£o foi poss√≠vel instalar o Groq package")
        return 1
    
    # Obter API key
    api_key = get_groq_api_key()
    
    if api_key:
        # Salvar API key
        save_api_key_to_env(api_key)
        
        # Atualizar configura√ß√£o
        update_continuous_config(True)
        
        print("\nüéâ CONFIGURA√á√ÉO CONCLU√çDA!")
        print("‚úÖ Groq AI habilitado e configurado")
        print("‚úÖ API key salva com seguran√ßa")
        print("‚úÖ Sistema cont√≠nuo configurado")
        
    else:
        # Desabilitar Groq AI
        update_continuous_config(False)
        
        print("\n‚ö†Ô∏è CONFIGURA√á√ÉO CONCLU√çDA (SEM GROQ AI)")
        print("‚ö†Ô∏è Groq AI desabilitado")
        print("‚úÖ Sistema cont√≠nuo configurado para funcionar sem AI")
    
    show_usage_instructions()
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
