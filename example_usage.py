#!/usr/bin/env python3
"""
Exemplo de Uso do Sistema Cont√≠nuo AutoApply.AI
Demonstra como usar o sistema programaticamente
"""

import asyncio
import sys
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
sys.path.append(str(Path(__file__).parent))

from continuous_autoapply import ContinuousAutoApplySystem, SystemConfig

async def example_basic_usage():
    """Exemplo b√°sico de uso do sistema."""
    print("üöÄ Exemplo B√°sico - Sistema Cont√≠nuo AutoApply.AI")
    print("=" * 60)
    
    # Configura√ß√£o personalizada
    custom_config = SystemConfig(
        search_interval=60,  # 1 minuto para teste
        max_applications_per_cycle=5,
        max_concurrent_applications=2,
        application_delay=10,
        enable_groq_ai=False,  # Desabilitar para teste
        platforms=["remotive", "weworkremotely"]
    )
    
    # Inicializar sistema
    system = ContinuousAutoApplySystem()
    system.system_config = custom_config
    
    print(f"‚è∞ Intervalo de busca: {custom_config.search_interval}s")
    print(f"üìä M√°x aplica√ß√µes por ciclo: {custom_config.max_applications_per_cycle}")
    print(f"ü§ñ Groq AI: {'Habilitado' if custom_config.enable_groq_ai else 'Desabilitado'}")
    
    # Executar apenas um ciclo para demonstra√ß√£o
    print("\nüîÑ Executando um ciclo de demonstra√ß√£o...")
    result = await system._run_application_cycle()
    
    print(f"\nüìä Resultado do ciclo:")
    print(f"   üìù Aplica√ß√µes: {result.get('total_applications', 0)}")
    print(f"   ‚úÖ Sucessos: {result.get('successful_applications', 0)}")
    print(f"   ‚ùå Falhas: {result.get('failed_applications', 0)}")

async def example_with_groq_ai():
    """Exemplo usando Groq AI."""
    print("\nü§ñ Exemplo com Groq AI")
    print("=" * 60)
    
    # Verificar se Groq AI est√° dispon√≠vel
    import os
    groq_key = os.getenv("GROQ_API_KEY")
    
    if not groq_key:
        print("‚ö†Ô∏è GROQ_API_KEY n√£o configurada")
        print("Execute: python setup_groq.py")
        return
    
    # Configura√ß√£o com Groq AI
    custom_config = SystemConfig(
        search_interval=120,
        max_applications_per_cycle=3,
        enable_groq_ai=True,
        groq_api_key=groq_key,
        groq_model="llama3-8b-8192",
        min_match_score=75.0  # Score mais alto para melhor qualidade
    )
    
    # Inicializar sistema
    system = ContinuousAutoApplySystem()
    system.system_config = custom_config
    
    print("ü§ñ Groq AI habilitado")
    print(f"üìä Score m√≠nimo: {custom_config.min_match_score}")
    print(f"üß† Modelo: {custom_config.groq_model}")
    
    # Executar ciclo com AI
    print("\nüîÑ Executando ciclo com Groq AI...")
    result = await system._run_application_cycle()
    
    print(f"\nüìä Resultado com AI:")
    print(f"   üìù Aplica√ß√µes: {result.get('total_applications', 0)}")
    print(f"   ‚úÖ Sucessos: {result.get('successful_applications', 0)}")
    print(f"   ‚ùå Falhas: {result.get('failed_applications', 0)}")

async def example_custom_platforms():
    """Exemplo com plataformas personalizadas."""
    print("\nüåê Exemplo com Plataformas Personalizadas")
    print("=" * 60)
    
    # Configura√ß√£o focada em plataformas espec√≠ficas
    custom_config = SystemConfig(
        search_interval=180,
        max_applications_per_cycle=10,
        platforms=["remotive", "email"],  # Apenas 2 plataformas
        application_delay=15,
        enable_groq_ai=False
    )
    
    system = ContinuousAutoApplySystem()
    system.system_config = custom_config
    
    print(f"üåê Plataformas: {', '.join(custom_config.platforms)}")
    print(f"‚è±Ô∏è Delay entre aplica√ß√µes: {custom_config.application_delay}s")
    
    # Executar ciclo
    print("\nüîÑ Executando ciclo com plataformas personalizadas...")
    result = await system._run_application_cycle()
    
    print(f"\nüìä Resultado:")
    print(f"   üìù Aplica√ß√µes: {result.get('total_applications', 0)}")
    print(f"   ‚úÖ Sucessos: {result.get('successful_applications', 0)}")
    print(f"   ‚ùå Falhas: {result.get('failed_applications', 0)}")

async def example_monitoring():
    """Exemplo de monitoramento."""
    print("\nüìä Exemplo de Monitoramento")
    print("=" * 60)
    
    # Simular sistema em execu√ß√£o
    system = ContinuousAutoApplySystem()
    
    # Simular algumas aplica√ß√µes
    system.total_applications = 25
    system.successful_applications = 20
    system.failed_applications = 5
    system.cycle_count = 3
    
    print("üìà Estat√≠sticas simuladas:")
    print(f"   üîÑ Ciclos: {system.cycle_count}")
    print(f"   üìù Total aplica√ß√µes: {system.total_applications}")
    print(f"   ‚úÖ Sucessos: {system.successful_applications}")
    print(f"   ‚ùå Falhas: {system.failed_applications}")
    
    if system.total_applications > 0:
        success_rate = (system.successful_applications / system.total_applications) * 100
        print(f"   üìà Taxa de sucesso: {success_rate:.1f}%")

def show_configuration_examples():
    """Mostra exemplos de configura√ß√£o."""
    print("\n‚öôÔ∏è EXEMPLOS DE CONFIGURA√á√ÉO")
    print("=" * 60)
    
    print("1. Configura√ß√£o B√°sica (sem AI):")
    print("""
    config = SystemConfig(
        search_interval=3600,  # 1 hora
        max_applications_per_cycle=20,
        enable_groq_ai=False
    )
    """)
    
    print("2. Configura√ß√£o com Groq AI:")
    print("""
    config = SystemConfig(
        search_interval=1800,  # 30 minutos
        max_applications_per_cycle=15,
        enable_groq_ai=True,
        groq_api_key="gsk_...",
        min_match_score=80.0
    )
    """)
    
    print("3. Configura√ß√£o Agressiva:")
    print("""
    config = SystemConfig(
        search_interval=600,   # 10 minutos
        max_applications_per_cycle=50,
        max_concurrent_applications=10,
        application_delay=5
    )
    """)
    
    print("4. Configura√ß√£o Conservadora:")
    print("""
    config = SystemConfig(
        search_interval=7200,  # 2 horas
        max_applications_per_cycle=5,
        max_concurrent_applications=1,
        application_delay=60
    )
    """)

async def main():
    """Fun√ß√£o principal com exemplos."""
    print("üìö EXEMPLOS DE USO - SISTEMA CONT√çNUO AUTOAPPLY.AI")
    print("=" * 80)
    
    try:
        # Exemplo 1: Uso b√°sico
        await example_basic_usage()
        
        # Exemplo 2: Com Groq AI (se dispon√≠vel)
        await example_with_groq_ai()
        
        # Exemplo 3: Plataformas personalizadas
        await example_custom_platforms()
        
        # Exemplo 4: Monitoramento
        await example_monitoring()
        
        # Mostrar exemplos de configura√ß√£o
        show_configuration_examples()
        
        print("\nüéâ EXEMPLOS CONCLU√çDOS!")
        print("=" * 80)
        print("Para usar o sistema completo:")
        print("1. python setup_groq.py          # Configurar Groq AI")
        print("2. python start_continuous_system.py  # Iniciar sistema")
        print("3. python monitor_system.py      # Monitorar sistema")
        
    except Exception as e:
        print(f"\n‚ùå Erro nos exemplos: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
