#!/usr/bin/env python3
"""
Demonstra√ß√£o Completa do Sistema AutoApply.AI
Mostra todas as funcionalidades implementadas
"""
import asyncio
import json
import sys
from pathlib import Path
from datetime import datetime

from loguru import logger

# Adicionar o diret√≥rio raiz ao path
sys.path.append(str(Path(__file__).parent))

from app.job_search.searcher import JobSearcher
from app.matching.matcher import JobMatcher
from app.automation.applicator_manager import ApplicatorManager
from app.main import load_config

async def demo_complete_system():
    """Demonstra√ß√£o completa do sistema."""
    logger.info("üöÄ DEMONSTRA√á√ÉO COMPLETA DO SISTEMA AUTOAPPLY.AI")
    logger.info("=" * 80)
    logger.info("Este sistema automatiza completamente o processo de candidatura")
    logger.info("para vagas de emprego, desde a busca at√© a aplica√ß√£o.")
    logger.info("=" * 80)
    
    try:
        # 1. Carregar configura√ß√£o
        logger.info("\nüìã 1. CARREGANDO CONFIGURA√á√ÉO")
        logger.info("-" * 40)
        config = load_config()
        if not config:
            logger.error("‚ùå Falha ao carregar configura√ß√£o")
            return
        logger.success("‚úÖ Configura√ß√£o carregada com sucesso")
        
        # 2. Buscar vagas em m√∫ltiplas plataformas
        logger.info("\nüîç 2. BUSCANDO VAGAS EM M√öLTIPLAS PLATAFORMAS")
        logger.info("-" * 40)
        logger.info("Plataformas suportadas:")
        logger.info("üåç Internacionais:")
        logger.info("   ‚Ä¢ WeWorkRemotely")
        logger.info("   ‚Ä¢ Remotive")
        logger.info("   ‚Ä¢ AngelList/Wellfound")
        logger.info("   ‚Ä¢ HackerNews")
        logger.info("üáßüá∑ Brasileiras:")
        logger.info("   ‚Ä¢ InfoJobs")
        logger.info("   ‚Ä¢ Catho")
        logger.info("üîó LinkedIn (requer credenciais)")
        
        searcher = JobSearcher(config)
        jobs = await searcher.search()
        
        if not jobs:
            logger.warning("‚ö†Ô∏è Nenhuma vaga encontrada")
            return
            
        logger.success(f"‚úÖ Encontradas {len(jobs)} vagas no total")
        
        # 3. Fazer matching com perfil
        logger.info("\nüéØ 3. FAZENDO MATCHING COM PERFIL")
        logger.info("-" * 40)
        logger.info("O sistema analisa cada vaga e calcula um score de compatibilidade")
        logger.info("baseado em:")
        logger.info("   ‚Ä¢ Skills do candidato")
        logger.info("   ‚Ä¢ Experi√™ncia")
        logger.info("   ‚Ä¢ Prefer√™ncias de localiza√ß√£o")
        logger.info("   ‚Ä¢ Faixa salarial")
        
        matcher = JobMatcher(config)
        matches = matcher.match_jobs(jobs)
        
        if not matches:
            logger.warning("‚ö†Ô∏è Nenhuma vaga com match alto encontrada")
            return
            
        logger.success(f"‚úÖ {len(matches)} vagas com match alto encontradas")
        
        # Mostrar top 5 matches
        logger.info("\nüèÜ TOP 5 VAGAS COM MELHOR MATCH:")
        for i, match in enumerate(matches[:5], 1):
            score = match['score'] * 100 if isinstance(match, dict) else match.score * 100
            job_title = match['job'].title if isinstance(match, dict) else match.job.title
            job_url = match['job'].url if isinstance(match, dict) else match.job.url
            logger.info(f"{i}. {job_title}")
            logger.info(f"   Score: {score:.1f}%")
            logger.info(f"   URL: {job_url}")
            logger.info("")
        
        # 4. Aplicar para vagas
        logger.info("\nüìù 4. APLICANDO PARA VAGAS")
        logger.info("-" * 40)
        logger.info("O sistema aplica automaticamente para as vagas com melhor match")
        logger.info("usando diferentes m√©todos:")
        logger.info("   ‚Ä¢ Aplica√ß√£o via website")
        logger.info("   ‚Ä¢ Envio de email")
        logger.info("   ‚Ä¢ Preenchimento de formul√°rios")
        
        applicator = ApplicatorManager(config)
        successful_applications = 0
        
        # Aplicar para as primeiras 5 vagas
        for i, match in enumerate(matches[:5], 1):
            logger.info(f"\nüìÑ Aplica√ß√£o {i}/5")
            logger.info(f"   Vaga: {match.job.title}")
            logger.info(f"   Score: {match.score * 100:.1f}%")
            
            try:
                result = await applicator.apply(match.job)
                if result.status == 'success':
                    logger.success(f"   ‚úÖ Aplica√ß√£o bem-sucedida")
                    successful_applications += 1
                else:
                    logger.warning(f"   ‚ö†Ô∏è Aplica√ß√£o falhou: {result.error}")
            except Exception as e:
                logger.error(f"   ‚ùå Erro na aplica√ß√£o: {str(e)}")
        
        # 5. Resumo final
        logger.info("\nüìä RESUMO FINAL")
        logger.info("=" * 80)
        logger.info(f"Total de vagas encontradas: {len(jobs)}")
        logger.info(f"Vagas com match alto: {len(matches)}")
        logger.info(f"Aplica√ß√µes tentadas: {min(5, len(matches))}")
        logger.info(f"Aplica√ß√µes bem-sucedidas: {successful_applications}")
        
        if matches:
            success_rate = (successful_applications/min(5, len(matches)))*100
            logger.info(f"Taxa de sucesso: {success_rate:.1f}%")
        
        # 6. Salvar resultados
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        results = {
            'timestamp': timestamp,
            'total_jobs_found': len(jobs),
            'high_match_jobs': len(matches),
            'applications_attempted': min(5, len(matches)),
            'successful_applications': successful_applications,
            'success_rate': success_rate if matches else 0,
            'platforms': {
                'weworkremotely': len([j for j in jobs if 'weworkremotely' in j.url.lower()]),
                'remotive': len([j for j in jobs if 'remotive' in j.url.lower()]),
                'hackernews': len([j for j in jobs if 'ycombinator' in j.url.lower()]),
                'linkedin': len([j for j in jobs if 'linkedin' in j.url.lower()]),
                'infojobs': len([j for j in jobs if 'infojobs' in j.url.lower()]),
                'catho': len([j for j in jobs if 'catho' in j.url.lower()]),
            }
        }
        
        # Criar diret√≥rio se n√£o existir
        output_dir = Path("data/demo_results")
        output_dir.mkdir(parents=True, exist_ok=True)
        
        output_file = output_dir / f"demo_results_{timestamp}.json"
        with open(output_file, 'w') as f:
            json.dump(results, f, indent=2)
        
        logger.success(f"\nüíæ Resultados salvos em: {output_file}")
        
        # 7. Conclus√£o
        logger.info("\nüéâ DEMONSTRA√á√ÉO FINALIZADA COM SUCESSO!")
        logger.info("=" * 80)
        logger.info("O sistema AutoApply.AI est√° funcionando perfeitamente:")
        logger.info("‚úÖ Busca autom√°tica em m√∫ltiplas plataformas")
        logger.info("‚úÖ Matching inteligente com perfil do candidato")
        logger.info("‚úÖ Aplica√ß√£o autom√°tica para vagas compat√≠veis")
        logger.info("‚úÖ Logging detalhado e relat√≥rios")
        logger.info("‚úÖ Suporte a plataformas nacionais e internacionais")
        logger.info("\nüöÄ O sistema est√° pronto para uso em produ√ß√£o!")
        
    except Exception as e:
        logger.error(f"\n‚ùå Erro na demonstra√ß√£o: {str(e)}")
        logger.error("Verifique os logs para identificar o problema.")

if __name__ == "__main__":
    logger.info("üß™ Iniciando Demonstra√ß√£o do Sistema AutoApply.AI")
    logger.info("Este demo mostra todas as funcionalidades implementadas")
    logger.info("=" * 80)
    
    try:
        asyncio.run(demo_complete_system())
        logger.success("\nüéØ DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO!")
        logger.info("O AutoApply.AI est√° pronto para uso em produ√ß√£o.")
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è Demonstra√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        logger.error(f"\n‚ùå ERRO CR√çTICO: {str(e)}")
        logger.error("O sistema encontrou um erro inesperado.")
